#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../sideKonnect');
var debug = require('debug')('sidekonnect:server');
var http = require('http');
let models = require('../models');
const jwt = require('jsonwebtoken');
const base64url = require('base64url');
//require('dotenv').config({ path: path.join(__dirname, '../.env') });

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Adding socketio middleware and Setting up socketio namespace "connection" for new sockets
 */

var io = require('socket.io')(server, {
  handlePreflightRequest: (req, res) => {
    const headers = {
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
        "Access-Control-Allow-Origin": req.headers.origin, //or the specific origin you want to give access to,
        "Access-Control-Allow-Credentials": true
    };
    res.writeHead(200, headers);
    res.end();
  }
});

io.on('connection', (socket) => {
  const currentUserToken = socket.handshake.query['token'];
  const secretKey = process.env.SECRET_KEY;
  var currentCallerID;

  // HELPER FUNCTIONS TO GENERATOR ROOM # AND NAME
  const RoomGenerator = (inputID) => {
    let callerInfo = jwt.verify(currentUserToken, secretKey);
    let callerID = parseInt(callerInfo.id);
    let receiverID = parseInt(inputID);
    let roomID = callerID > receiverID ? (receiverID + '-' + callerID) : (callerID + '-' + receiverID);

    return roomID;
  };
  
  const NameGenerator = () => {
    let callerInfo = jwt.verify(currentUserToken, secretKey);
    let callerName = callerInfo.firstname + ' ' + callerInfo.lastname;

    return callerName;
  };

  const EmailGenerator = () => {
    let callerInfo = jwt.verify(currentUserToken, secretKey);
    let callerEmail = callerInfo.email;

    return callerEmail;
  };

  socket.on('join_room', (receiverID) => {
    try {
      let callerName = NameGenerator();
      let roomID = RoomGenerator(receiverID);
      socket.join(roomID);

      let joinData = {
        'action': 'joining',
        'msg': 'success',
        'join': (`${callerName} has joined the room ${roomID}`)
      };

      io.sockets.in(roomID).emit('join_room', joinData);
    } catch (err) {
      
    };
  });

  socket.on('join_call', (data) => {
    try {
      let currentUserInfo = jwt.verify(currentUserToken, secretKey);
      let currentUserId = currentUserInfo.id;
      let callerName = NameGenerator();
      let callerEmail = EmailGenerator();
      let roomID = RoomGenerator(data.receiverID);
      let secretRoomEncoded = base64url(currentUserToken);
      let tokboxRoom = "https://tokbox.com/embed/embed/ot-embed.js?embedId=853df113-5f97-4ed9-9d0d-06ccae7a92a2&room=" + secretRoomEncoded + "&iframe=true";

      let callingData = {
        'action': 'calling',
        'msg': 'success',
        'callerEmail': callerEmail,
        'caller': callerName,
        'callerID': currentUserId,
        'receiverID': data.receiverID,
        'tokbox': tokboxRoom,
      };
	
      currentCallerID = data.receiverID;

      io.sockets.in(roomID).emit('join_room', callingData);
    } catch (err) {
      
    };
  });

  socket.on('accept_call', (data) => {
    try {
      let roomID = RoomGenerator(data.receiverID);

      let callingData = {
        'action': 'accepting',
        'msg': 'success',
        'callerEmail': callerEmail,
        'caller': callerName,
        'receiverID': data.receiverID,
        'tokbox': tokboxRoom,
      };

      io.sockets.in(roomID).emit('join_room', callingData);
    } catch (err) {
      
    };
  })

  socket.on('disconnect_call', (data) => {
    try {
      let roomID = RoomGenerator(data.receiverID);
      let callerName = NameGenerator();
      let callerEmail = EmailGenerator();
      let secretRoomEncoded = base64url(currentUserToken);
      let tokboxRoom = "https://tokbox.com/embed/embed/ot-embed.js?embedId=853df113-5f97-4ed9-9d0d-06ccae7a92a2&room=" + secretRoomEncoded + "&iframe=true";

      let callingData = {
        'action': 'disconnecting',
        'msg': 'success',
        'callerEmail': callerEmail,
        'caller': callerName,
        'receiverID': data.receiverID,
        'tokbox': tokboxRoom,
      };
      console.log(currentCallerID);
      currentCallerID = '';
      console.log(currentCallerID);

      io.sockets.in(roomID).emit('join_room', callingData);
    } catch (err) {
      
    };
  });

  socket.on('removeuser', (userID) => {
    try {
      let currentUserInfo = jwt.verify(currentUserToken, secretKey);
      // FIND FRIEND'S INFO
      models.buddy.findOne({
        where : {
          friend_id: userID,
          userId: currentUserInfo.id
        }
      }).then(user => {
        if (user) {
          // IF CURRENT USER FOUND, FIND THE REQUESTED FRIEND TO BE ADDED
          //console.log(user);
        };
      })
    } catch (err) {
      console.log('error removing user..');
    };
  });

  socket.on('disconnect', () => {
    console.log(currentCallerID);
    if (currentCallerID) {
    	try {
      let roomID = RoomGenerator(currentCallerID);
      let callerName = NameGenerator();
      let callerEmail = EmailGenerator();
      let secretRoomEncoded = base64url(currentUserToken);
      let tokboxRoom = "https://tokbox.com/embed/embed/ot-embed.js?embedId=853df113-5f97-4ed9-9d0d-06ccae7a92a2&room=" + secretRoomEncoded + "&iframe=true";

      let callingData = {
        'action': 'disconnecting',
        'msg': 'success',
        'callerEmail': callerEmail,
        'caller': callerName,
        'receiverID': currentCallerID,
        'tokbox': tokboxRoom,
      };

      currentCallerID = '';

      io.sockets.in(roomID).emit('join_room', callingData);
    } catch (err) {
      
    };
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

return models.sequelize.sync().then(result => {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
